classdef EventArray < robotics.ros.Message
    %EventArray MATLAB implementation of dvs_msgs/EventArray
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'dvs_msgs/EventArray' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '5e8beee5a6c107e504c2e78903c224b8' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        DvsMsgsEventClass = robotics.ros.msg.internal.MessageFactory.getClassForType('dvs_msgs/Event') % Dispatch to MATLAB class for message type dvs_msgs/Event
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Height
        Width
        Events
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Events', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Events', 'Header', 'Height', 'Width'} % List of non-constant message properties
        ROSPropertyList = {'events', 'header', 'height', 'width'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = EventArray(msg)
            %EventArray Construct the message object EventArray
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'EventArray', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function height = get.Height(obj)
            %get.Height Get the value for property Height
            height = typecast(int32(obj.JavaMessage.getHeight), 'uint32');
        end
        
        function set.Height(obj, height)
            %set.Height Set the value for property Height
            validateattributes(height, {'numeric'}, {'nonempty', 'scalar'}, 'EventArray', 'Height');
            
            obj.JavaMessage.setHeight(height);
        end
        
        function width = get.Width(obj)
            %get.Width Get the value for property Width
            width = typecast(int32(obj.JavaMessage.getWidth), 'uint32');
        end
        
        function set.Width(obj, width)
            %set.Width Set the value for property Width
            validateattributes(width, {'numeric'}, {'nonempty', 'scalar'}, 'EventArray', 'Width');
            
            obj.JavaMessage.setWidth(width);
        end
        
        function events = get.Events(obj)
            %get.Events Get the value for property Events
            if isempty(obj.Cache.Events)
                javaArray = obj.JavaMessage.getEvents;
                array = obj.readJavaArray(javaArray, obj.DvsMsgsEventClass);
                obj.Cache.Events = feval(obj.DvsMsgsEventClass, array);
            end
            events = obj.Cache.Events;
        end
        
        function set.Events(obj, events)
            %set.Events Set the value for property Events
            if ~isvector(events) && isempty(events)
                % Allow empty [] input
                events = feval([obj.DvsMsgsEventClass '.empty'], 0, 1);
            end
            
            validateattributes(events, {obj.DvsMsgsEventClass}, {'vector'}, 'EventArray', 'Events');
            
            javaArray = obj.JavaMessage.getEvents;
            array = obj.writeJavaArray(events, javaArray, obj.DvsMsgsEventClass);
            obj.JavaMessage.setEvents(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Events)
                obj.Cache.Events = [];
                obj.Cache.Events = obj.Events;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Events = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Height = obj.Height;
            cpObj.Width = obj.Width;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Events = copy(obj.Events);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Height = strObj.Height;
            obj.Width = strObj.Width;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            EventsCell = arrayfun(@(x) feval([obj.DvsMsgsEventClass '.loadobj'], x), strObj.Events, 'UniformOutput', false);
            obj.Events = vertcat(EventsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Height = obj.Height;
            strObj.Width = obj.Width;
            strObj.Header = saveobj(obj.Header);
            strObj.Events = arrayfun(@(x) saveobj(x), obj.Events);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.dvs_msgs.EventArray.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.dvs_msgs.EventArray;
            obj.reload(strObj);
        end
    end
end
